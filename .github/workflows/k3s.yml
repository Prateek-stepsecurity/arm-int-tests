name: k3s Outbound Connectivity Test

on:
  workflow_dispatch:

jobs:
  k3s-test:
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@int-sh
        with:
          egress-policy: audit
      - name: Update /etc/resolv.conf
        run: |
          sudo rm -f /etc/resolv.conf
          echo "nameserver 172.17.0.1" | sudo tee /etc/resolv.conf
      - run: cat /etc/resolv.conf
      - uses: chainguard-dev/actions/setup-k3d@main
        with:
          # Image to use for k3s. This also inherently sets the k3s version.
          # For example, cgr.dev/chainguard/k3s:latest
          k3s-image: cgr.dev/chainguard/k3s:latest
          # The version of k3d to use.
          k3d-version: 5.5.1
          # Registry Host is the authority of the local container registry to
          # stand up for this K3D cluster.
          # For example, registry.local
          registry-host: registry.local
          # Registry port is the port of the registry to expose
          registry-port: 5000
          # Registry Mirror is the hostname of a registry mirror to use for DockerHub
          # to avoid rate-limiting.
          # For example, mirror.gcr.io.
          # Required.
          registry-mirror: mirror.gcr.io

      - name: Verify k3s installation
        run: kubectl get nodes
      - run: docker ps

     
      - name: Deploy test pod
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: test-pod
          spec:
            containers:
            - name: curl-container
              image: curlimages/curl:7.85.0
              command: ["sh", "-c", "sleep infinity"]
          EOF

      - name: Wait for pod to be ready
        run: kubectl wait --for=condition=Ready pod/test-pod --timeout=60s

      - name: Verify outbound connectivity
        run: |
          kubectl exec test-pod -- curl -I https://www.google.com

      - name: Check pod logs
        run: kubectl logs test-pod
      - run: cat /etc/resolv.conf
      - name: Get Kubernetes events
        run: kubectl get events --all-namespaces

      - name: Print k3s server logs
        run: |
          echo "==== k3s Server Logs ===="
          SERVER_CONTAINER=$(docker ps --filter "name=k3d-${CLUSTER_NAME}-server-0" --format "{{.Names}}")
          echo "Server container: $SERVER_CONTAINER"
          docker logs $SERVER_CONTAINER

      - name: Print k3s agent logs (if any)
        if: ${{ inputs.worker-count != '0' }}
        run: |
          echo "==== k3s Agent Logs ===="
          AGENT_CONTAINERS=$(docker ps --filter "name=k3d-${CLUSTER_NAME}-agent-" --format "{{.Names}}")
          for AGENT_CONTAINER in $AGENT_CONTAINERS; do
            echo "Agent container: $AGENT_CONTAINER"
            docker logs $AGENT_CONTAINER
          done
